join                   package:dplyr                   R Documentation

_J_o_i_n _t_w_o _t_b_l_s _t_o_g_e_t_h_e_r.

_D_e_s_c_r_i_p_t_i_o_n:

     These are generic functions that dispatch to individual tbl
     methods - see the method documentation for details of individual
     data sources. ‘x’ and ‘y’ should usually be from the same data
     source, but if ‘copy’ is ‘TRUE’, ‘y’ will automatically be copied
     to the same source as ‘x’ - this may be an expensive operation.

_U_s_a_g_e:

     inner_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
     
     left_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
     
     right_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
     
     full_join(x, y, by = NULL, copy = FALSE, suffix = c(".x", ".y"), ...)
     
     semi_join(x, y, by = NULL, copy = FALSE, ...)
     
     anti_join(x, y, by = NULL, copy = FALSE, ...)
     
_A_r_g_u_m_e_n_t_s:

    x, y: tbls to join

      by: a character vector of variables to join by.  If ‘NULL’, the
          default, ‘join’ will do a natural join, using all variables
          with common names across the two tables. A message lists the
          variables so that you can check they're right (to suppress
          the message, simply explicitly list the variables that you
          want to join).

          To join by different variables on x and y use a named vector.
          For example, ‘by = c("a" = "b")’ will match ‘x.a’ to ‘y.b’.

    copy: If ‘x’ and ‘y’ are not from the same data source, and ‘copy’
          is ‘TRUE’, then ‘y’ will be copied into the same src as ‘x’.
          This allows you to join tables across srcs, but it is a
          potentially expensive operation so you must opt into it.

  suffix: If there are non-joined duplicate variables in ‘x’ and ‘y’,
          these suffixes will be added to the output to diambiguate
          them.

     ...: other parameters passed onto methods

_J_o_i_n _t_y_p_e_s:

     Currently dplyr supports four join types:

     ‘inner_join’ return all rows from ‘x’ where there are matching
          values in ‘y’, and all columns from ‘x’ and ‘y’. If there are
          multiple matches between ‘x’ and ‘y’, all combination of the
          matches are returned.

     ‘left_join’ return all rows from ‘x’, and all columns from ‘x’ and
          ‘y’. Rows in ‘x’ with no match in ‘y’ will have ‘NA’ values
          in the new columns. If there are multiple matches between ‘x’
          and ‘y’, all combinations of the matches are returned.

     ‘right_join’ return all rows from ‘y’, and all columns from ‘x’
          and y. Rows in ‘y’ with no match in ‘x’ will have ‘NA’ values
          in the new columns. If there are multiple matches between ‘x’
          and ‘y’, all combinations of the matches are returned.

     ‘semi_join’ return all rows from ‘x’ where there are matching
          values in ‘y’, keeping just columns from ‘x’.

          A semi join differs from an inner join because an inner join
          will return one row of ‘x’ for each matching row of ‘y’,
          where a semi join will never duplicate rows of ‘x’.

     ‘anti_join’ return all rows from ‘x’ where there are not matching
          values in ‘y’, keeping just columns from ‘x’.

     ‘full_join’ return all rows and all columns from both ‘x’ and ‘y’.
          Where there are not matching values, returns ‘NA’ for the one
          missing.

_G_r_o_u_p_i_n_g:

     Groups are ignored for the purpose of joining, but the result
     preserves the grouping of ‘x’.


